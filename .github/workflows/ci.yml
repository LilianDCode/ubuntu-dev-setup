name: CI

on: [push, pull_request]

jobs:
  shellcheck:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      name: Checkout code
    - name: Install ShellCheck
      run: sudo apt-get install -y shellcheck
    - name: Lint the scripts
      run: |
        shellcheck setup.sh

  test-setup:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, ubuntu-22.04, ubuntu-24.04]
    steps:
    - uses: actions/checkout@v2
      name: Checkout code
    - name: Make scripts executable
      run: chmod +x setup.sh
    - name: Run setup script
      run: sudo ./setup.sh --all --set-warp-default
    - name: Check Docker installation
      run: |
        if ! command -v docker &> /dev/null; then
          echo "Docker not installed correctly"
          exit 1
        fi
        if ! docker compose version &> /dev/null; then
          echo "Docker Compose not installed correctly"
          exit 1
        fi
    - name: Check VS Code installation
      run: |
        if ! command -v code &> /dev/null; then
          echo "VS Code not installed correctly"
          exit 1
        fi
    - name: Check Warp Terminal installation
      run: |
        if ! command -v warp-terminal &> /dev/null; then
          echo "Warp Terminal not installed correctly"
          exit 1
        fi
    - name: Check Postman installation
      run: |
        if ! command -v postman &> /dev/null; then
          echo "Postman not installed correctly"
          exit 1
        fi

  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"

      - name: Install semantic-release
        run: npm install -g semantic-release @semantic-release/changelog @semantic-release/git @semantic-release/github

      - name: Read VERSION file
        id: read_version
        run: echo "VERSION=$(cat VERSION)" >> $GITHUB_ENV

      - name: Run Semantic Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ env.VERSION }}
        run: |
          npx semantic-release --branches main \
          --repository-url https://github.com/${{ github.repository }} \
          --tag-format v${{ env.VERSION }} \
          --plugins @semantic-release/commit-analyzer @semantic-release/release-notes-generator @semantic-release/changelog \
          --plugins @semantic-release/git @semantic-release/github

      - name: Update VERSION file
        run: |
          NEW_VERSION=$(npx semantic-release --dry-run | grep "nextRelease" | sed -n 's/.*"version": "\(.*\)".*/\1/p')
          echo $NEW_VERSION > VERSION
          git add VERSION
          git commit -m "chore(release): update version to $NEW_VERSION"
          git push origin main
