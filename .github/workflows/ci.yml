name: CI

on: [push, pull_request]

jobs:
  shellcheck:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      name: Checkout code
    - name: Install ShellCheck
      run: sudo apt-get install -y shellcheck
    - name: Lint the scripts
      run: |
        shellcheck setup.sh

  test-setup:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, ubuntu-24.04]
    steps:
    - uses: actions/checkout@v2
      name: Checkout code
    - name: Make scripts executable
      run: chmod +x setup.sh
    - name: Run setup script
      run: sudo ./setup.sh --all --set-warp-default-terminal --vscode-extensions
    - name: Check Docker installation
      run: |
        if ! command -v docker &> /dev/null; then
          echo "Docker not installed correctly"
          exit 1
        fi
        if ! docker compose version &> /dev/null; then
          echo "Docker Compose not installed correctly"
          exit 1
        fi
    - name: Check VS Code installation
      run: |
        if ! command -v code &> /dev/null; then
          echo "VS Code not installed correctly"
          exit 1
        fi
    # - name: Check VS Code extensions installation
    #   run: |
    #     EXTENSIONS=$(code --list-extensions)
    #     EXPECTED_EXTENSIONS="davidanson.vscode-markdownlint github.copilot github.copilot-chat ms-vscode-remote.remote-containers ms-vscode-remote.remote-ssh ms-vscode.remote-explorer ms-vsliveshare.vsliveshare pshaddel.conventional-branch streetsidesoftware.code-spell-checker vivaxy.vscode-conventional-commits yzhang.markdown-all-in-one"
    #     for EXTENSION in $EXPECTED_EXTENSIONS; do
    #       if ! echo "$EXTENSIONS" | grep -q "$EXTENSION"; then
    #         echo "VS Code extension $EXTENSION not installed correctly"
    #         exit 1
    #       fi
    #     done
    - name: Check Warp Terminal installation
      run: |
        if ! command -v warp-terminal &> /dev/null; then
          echo "Warp Terminal not installed correctly"
          exit 1
        fi
    - name: Check Postman installation
      run: |
        if ! command -v postman &> /dev/null; then
          echo "Postman not installed correctly"
          exit 1
        fi

  release:
    needs: test-setup
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      issues: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"

      - name: Install semantic-release
        run: npm install -g semantic-release @semantic-release/changelog @semantic-release/git @semantic-release/github @semantic-release/commit-analyzer @semantic-release/release-notes-generator

      - name: Read VERSION file
        id: read_version
        run: echo "VERSION=$(cat VERSION)" >> $GITHUB_ENV

      - name: Run Semantic Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release
